# Metview Macro

BaseDate_list = [2021-03-08,2021-03-07,2021-03-06,2021-03-05,2021-03-04,2021-03-03,2021-03-02,2021-03-01,2021-02-28]
BaseTime = 0
#StepF_list = [36,60,84,108,132,156,180,204,228]
StepF_list = [24,48,72,96,120,144,168,180,240]
Perc_list = [95,98,99]
Acc = 12
SystemFC_list = ["ecPoint","ENS"]
Git_repo = "/vol/ecpoint/mofp/PhD/Papers2Write/FlashFloods_Ecuador"
DirIN_FC = "Data/Raw_DoNotShare/FC"
DirOUT = "Data/Figures/Case_Study/Perc"
########################################################################################################################################################

for indSystemFC = 1 to count(SystemFC_list) do

    SystemFC = SystemFC_list[indSystemFC]
    
    for indPerc = 1 to count(Perc_list) do
        
        Perc = Perc_list[indPerc]
        print(" ")
        print(SystemFC, tab, Perc)
        
        for indDate = 1 to count(BaseDate_list) do
        
            BaseDate = BaseDate_list[indDate]
            StepF = StepF_list[indDate]
                
                
                # General input parameters
                StepS = StepF - Acc
                ValidDateS = BaseDate + BaseTime + StepS/24
                ValidDateF = BaseDate + BaseTime + StepF/24

                BaseDateSTR = string(BaseDate, "yyyymmdd")
                BaseTimeSTR = left_pad_number(BaseTime,2)  
                StepSSTR = left_pad_number(StepS,3)  
                StepFSTR = left_pad_number(StepF,3)  
                AccSTR = left_pad_number(Acc,3) 

                ValidDateSSTR = string(ValidDateS, "yyyymmdd HH")
                ValidDateFSTR = string(ValidDateF, "yyyymmdd HH")

                print(BaseDateSTR, tab, BaseTimeSTR, tab, StepFSTR)                
                
                
                # Read rainfall forecasts and select the relevant percentile
                if SystemFC = "ENS" then
                    
                    FileIN_tp1 = Git_repo & "/" & DirIN_FC & "/" & SystemFC & "/" & BaseDateSTR & BaseTimeSTR & "/tp_" & BaseDateSTR & "_" & BaseTimeSTR & "_" & StepSSTR & ".grib"
                    FileIN_tp2 = Git_repo & "/" & DirIN_FC & "/" & SystemFC & "/" & BaseDateSTR & BaseTimeSTR & "/tp_" & BaseDateSTR & "_" & BaseTimeSTR & "_" & StepFSTR & ".grib"
                    tp1 = read(FileIN_tp1)
                    tp2 = read(FileIN_tp2)
                    tp = (tp2 - tp1) * 1000
                    perc = percentile(
                        percentiles : Perc,
                        data        : tp
                        )

                else 
                    
                    FileIN_tp = Git_repo & "/" & DirIN_FC & "/" & SystemFC & "/" & BaseDateSTR & BaseTimeSTR & "/Pt_BC_PERC_" & AccSTR & "_" & BaseDateSTR & "_" & BaseTimeSTR & "_" & StepFSTR & ".grib"
                    tp = read(FileIN_tp)
                    perc = tp[Perc]
                    
                end if


                # Plotting the rainfall forecasts
                coastlines = mcoast(
                    map_coastline_resolution       : "full",
                    map_coastline_colour           : "charcoal",
                    map_coastline_thickness        : 3,
                    map_coastline_sea_shade        : "on",
                    map_coastline_sea_shade_colour : "RGB(0.7084,0.9465,0.9465)",
                    map_boundaries                 : "on",
                    map_boundaries_colour          : "blue",
                    map_boundaries_thickness       : 3,
                    map_grid                       : "off",
                    map_label                      : "off"
                    )

                geo_view = geoview(
                    map_area_definition : "corners",
                    area                : [1.6,-81.2,-5.11,-75],
                    coastlines          : coastlines
                    )

                contouring = mcont(
                        legend                       : "on",
                        contour                      : "off",
                        contour_level_selection_type : "level_list",
                        contour_level_list           : [0,1,2,5,10,20,30,40,50,60,80,100,125,150,200,300,500],
                        contour_label                : "off",
                        contour_shade                : "on",
                        contour_shade_colour_method  : "list",
                        contour_shade_method         : "area_fill",
                        contour_shade_colour_list    : ["grey","RGB(0.75,0.95,0.93)","RGB(0.45,0.93,0.78)","RGB(0.07,0.85,0.61)","RGB(0.53,0.8,0.13)","RGB(0.6,0.91,0.057)","RGB(0.9,1,0.4)","RGB(0.89,0.89,0.066)","RGB(1,0.73,0.0039)","RGB(1,0.49,0.0039)","red","RGB(0.85,0.0039,1)","RGB(0.63,0.0073,0.92)","RGB(0.37,0.29,0.91)","RGB(0.04,0.04,0.84)","RGB(0.042,0.042,0.43)"]
                        )

                legend = mlegend(
                    legend_text_colour          : "black",
                    legend_text_font            : "arial",
                    legend_text_font_size       : 0.2,
                    legend_entry_plot_direction : "row",
                    legend_box_blanking         : "on",
                    legend_entry_text_width     : 50
                    )
                    
                title = mtext(
                    text_line_count : 3,
                    text_line_1 : SystemFC & " - " & Perc & "th percentile (t+" & StepS & ",t+" & StepF & ")",
                    text_line_2 : "Rainfall event between " & ValidDateSSTR & " UTC and " & ValidDateFSTR & " UTC",
                    text_line_3 : " ",
                    text_colour : "charcoal",
                    text_font   : "arial",
                    text_font_size  : 0.5
                    )
                    

                # Saving the plot
                FileOUT_temp = Git_repo & "/" & DirOUT & "/" & BaseDateSTR & "_" & BaseTimeSTR & "_" & StepFSTR & "_Perc" & Perc & "_" & SystemFC
                svg = svg_output(output_name: FileOUT_temp)
                setoutput(svg)
                plot(perc, geo_view, contouring, legend, title, coastlines)

            
        end for
        
    end for

end for
    

############################################################################
function left_pad_number (num: number, num_digits: number)

    num_string = ''  

    for pow = num_digits to 1 by -1 do
        digit = int(num / (10^(pow-1)))
        num_string = num_string & digit
        num = num - digit *(10^(pow-1))
    end for

    return num_string

end left_pad_number

