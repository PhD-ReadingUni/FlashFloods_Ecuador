# Metview Macro

# Create_AccFF.mv creates flash flood observational fields for different
# accumulation periods.

# INPUT PARAMETERS
Year = 2020
ThrEFFCI_list = [1]
Acc = 12
Git_repo = "/vol/ecpoint/mofp/PhD/Papers2Write/FlashFloods_Ecuador"
FileIN_Emask = "Data/Processed/EcuadorMasks_ENS/Ecuador_3Regions.grib"
DirIN_FF = "Data/Processed/ObsFF_Regions"
DirOUT_FF = "Data/Processed/ObsFF_"
#########################################################################


# Read Ecuador's mask
Emask = read(Git_repo & "/" & FileIN_Emask)
Emask_vals = values(Emask)
Emask_lats = latitudes(Emask)
Emask_lons = longitudes(Emask)
Emask_nonzeros = find(Emask_vals,1,"all") & find(Emask_vals,2,"all") & find(Emask_vals,3,"all")
m = count(Emask_nonzeros)
Regs_mask = nil
Lats_mask = nil
Lons_mask = nil
for i = 1 to m do
    ind = Emask_nonzeros[i]
    Regs_mask = Regs_mask & |round(Emask_vals[ind],2)|
    Lats_mask = Lats_mask & |round(Emask_lats[ind],2)|
    Lons_mask = Lons_mask & |round(Emask_lons[ind],2)|
end for
Lons_mask = Lons_mask - 360
print(sum(Emask_vals))
plot(Emask)
stop

# Create template for observational fields
valFF = Regs_mask * 0
latFF = Lats_mask
lonFF = Lons_mask


# Create the [Acc]-hourly observational fields
for indEFFCI = 1 to count(ThrEFFCI_list) do
    
    ThrEFFCI = ThrEFFCI_list[indEFFCI]
    if ThrEFFCI<10 then
        ThrEFFCISTR = "0" & string(ThrEFFCI)
    else
        ThrEFFCISTR = string(ThrEFFCI)
    end if
    
    # Read the flood reports
    FileIN_temp = Git_repo & "/" & DirIN_FF & "/ObsFF_" & Year & "_EFFCI" & ThrEFFCISTR & "_1Region.csv"
    FF = read_table(
            table_delimiter  : ",",
            table_header_row : 1,
            table_filename   : FileIN_temp
            )
    Lons = values(FF,1)
    Lats = values(FF,2)
    Times = values(FF,4)
    Months = values(FF,5)
    Days = values(FF,6)
    n = count(Lons)
    
    # Create the dates and times for each report
    DatesUTC = []
    for i = 1 to n do
        if Months[i] < 10 then
            MonthSTR = "0" & Months[i]
        else
            MonthSTR = Months[i]
        end if
        if Days[i] < 10 then
            DaysSTR = "0" & Days[i]
        else
            DaysSTR = Days[i]
        end if
        DatesUTC = DatesUTC & [date(Year & "-" & MonthSTR & "-" & DaysSTR & " " & Times[i]) + 5/24]
    end for
    
    # Create the observational fields
    PeriodS = date(Year & "-01-01")
    PeriodF = date(Year & "-12-31")
    for TheDate = PeriodS to PeriodF do    
        
        for StepF = 0 to 18 by 6 do
        
            DateF = TheDate + (StepF/24)
            DateS = DateF - (Acc/24)
            
            DateSTR = string(DateF, "yyyymmdd")
            if StepF<10 then
                StepFSTR = "0" & StepF
            else
                StepFSTR = StepF
            end if
            
            print("Post-processing flood reports for " & Acc & "-hourly period ending on " & DateSTR & " at " & StepFSTR & " UTC - EFFCI=" & ThrEFFCI)
            tempFF = (DatesUTC>=DateS) and (DatesUTC<DateF)
            indFF_list = find(tempFF,1,"all")
            tempFF_grid = valFF
            if count(indFF_list) = 0 then
                print(" - No reports recorded.")
            else
                for i = 1 to count(indFF_list) do
                    indFF = indFF_list[i]
                    indFF_grid = nearest_gridpoint_info(Emask,Lats[indFF],Lons[indFF])
                    loop ngp in indFF_grid
                        val_grid = ngp.value
                        lat_grid = round(ngp.latitude,2)
                        lon_grid = round(ngp.longitude,2)
                        tempFF_grid = tempFF_grid + ( (latFF>(lat_grid-0.0001) and latFF<(lat_grid+0.0001)) and (lonFF>(lon_grid-0.0001) and lonFF<(lon_grid+0.0001)) )
                    end loop
                end for
                if sum(tempFF_grid)<>count(indFF_list) then
                    print("WARNING! Number of flood reports not compatible.")
                end if
            end if
            
            # Saving the observational fields
            FileOUT_FF = Git_repo & "/" & DirOUT_FF & "/EFFCI" & ThrEFFCISTR & "/ObsFF_" & DateSTR & "_" & StepFSTR & ".csv"
            File_FF = file(FileOUT_FF)
            write(File_FF, "lat,lon,ObsFF", newline)
            for j = 1 to count(tempFF_grid) do
                append(File_FF, latFF[j], ",", lonFF[j], ",", tempFF_grid[j], newline)
            end for
            
        end for
    
    end for
    
end for    