# Metview Macro

# Compute_RainThr.mv extracts the nearest grid-box day1 ecPoint-Rainfall 
# forecasts for a training flash flood dataset to determine the  
# rainfall thresholds that might generate flash floods 

# INPUT PARAMETERS
Year = 2019
ThrEFFCI_list = [1,6,10]
Region_list = ["Costa", "Sierra", "Oriente"]
Git_repo = "/vol/ecpoint/mofp/PhD/Papers2Write/FlashFloods_Ecuador"
DirIN_FF = "Data/Processed/ObsFF_Regions"
DirIN_PR = "Data/Raw/ecPoint"
DirOUT = "Data/Processed/RainThr"
######################################################################


for indRegion = 1 to count(Region_list) do
    
    Region = Region_list[indRegion]
        
    for indEFFCI = 1 to count(ThrEFFCI_list) do
    
        ThrEFFCI = ThrEFFCI_list[indEFFCI]
        print("Creating rainfall thresholds for " & Region & " and EFFCI>=" & ThrEFFCI)
        
        if ThrEFFCI<10 then
            ThrEFFCISTR = "0" & string(ThrEFFCI)
        else
            ThrEFFCISTR = string(ThrEFFCI)
        end if
        
        # Initiate the variable that contains the nearest grid-box ecPoint-Rainfall forecasts to each flash flood report
        PR_vals = []
        
        # Read the flash flood reports
        FileIN_temp = Git_repo & "/" & DirIN_FF & "/ObsFF_" & Year & "_EFFCI" & ThrEFFCISTR & "_" & Region & ".csv"
        FF = read_table(
                table_delimiter  : ",",
                table_header_row : 1,
                table_filename   : FileIN_temp
                )
        Lons = values(FF,1)
        Lats = values(FF,2)
        Regions = values(FF,3)
        Times = values(FF,4)
        Months = values(FF,5)
        Days = values(FF,6)
        Years = values(FF,7)
        FFCI = values(FF,8)
        FFSI = values(FF,9)
        EFFCI = values(FF,10)
        n = count(Lons)
        
        for i = 1 to n do

            # Definition of the date and time of the flash flood reports
            TheLon = Lons[i]
            TheLat = Lats[i]
            TheDate = string(Years[i]) & left_pad_number(Months[i],2) & left_pad_number(Days[i],2)
            TheTime = parse(parse(Times[i], " ")[1], ":")
            ValidTime_UTC = date(TheDate) + (TheTime[1] + TheTime[2]/60 + TheTime[3]/3600 + 5) / 24 # adding 5 hours converts the time from local to UTC time
            Day = string(ValidTime_UTC, "yyyymmdd")
            Hour = hour(ValidTime_UTC)
            
            # Selection of the day1 ecPoint-Rainfall forecasts to consider for each flash flood report
            if (Hour<6) then
                BaseDate1 = Day
                BaseTime1 = left_pad_number(0,2)
                StepF1 = left_pad_number(12,3)
                BaseDate2 = string(date(Day)-1, "yyyymmdd")
                BaseTime2 = left_pad_number(12,2)
                StepF2 = left_pad_number(24,3)
            else if (Hour>=6 and Hour<12) then
                BaseDate1 = Day
                BaseTime1 = left_pad_number(0,2)
                StepF1 = left_pad_number(18,3)
                BaseDate2 = string(date(Day)-1, "yyyymmdd")
                BaseTime2 = left_pad_number(12,2)
                StepF2 = left_pad_number(30,3)
            else if (Hour>=12 and Hour<18) then        
                BaseDate1 = Day
                BaseTime1 = left_pad_number(0,2)
                StepF1 = left_pad_number(24,3)
                BaseDate2 = Day
                BaseTime2 = left_pad_number(12,2)
                StepF2 = left_pad_number(12,3)
            else if (Hour>=18) then        
                BaseDate1 = Day
                BaseTime1 = left_pad_number(0,2)
                StepF1 = left_pad_number(30,3)
                BaseDate2 = Day
                BaseTime2 = left_pad_number(12,2)
                StepF2 = left_pad_number(18,3)
            end if            
            
            # Reading the ecPoint-Rainfall forecasts
            File_PR1 = Git_repo & "/" & DirIN_PR & "/" & BaseDate1 & BaseTime1 & "/Pt_BC_PERC_012_" & BaseDate1 & "_" & BaseTime1 & "_" & StepF1 & ".grib"
            File_PR2 = Git_repo & "/" & DirIN_PR & "/" & BaseDate2 & BaseTime2 & "/Pt_BC_PERC_012_" & BaseDate2 & "_" & BaseTime2 & "_" & StepF2 & ".grib"
            if exist(File_PR1) and exist(File_PR1) then
                print(" - Post-processing report n." & i & "/" & n)
                PR1 = read(File_PR1)
                PR2 = read(File_PR2)
                PR_vals = PR_vals & nearest_gridpoint(PR1,TheLat,TheLon) & nearest_gridpoint(PR2,TheLat,TheLon) 
            end if
            
        end for

        # Computing the rainfall thresholds
        if count(PR_vals) > 0 then
            
            print(" - Computing the percentiles...")
            perc = []
            for i = 1 to 99 do
                perc = perc & [i]
            end for
            Thr = percentile(vector(PR_vals),perc) 
            
            # Saving the rainfall thresholds as .csv file
            print(" - Saving the percentiles as .csv file...")
            m = count(Thr)
            FileOUT_csv = file(Git_repo & "/" & DirOUT & "/RainThr_" & Year & "_EFFCI" & ThrEFFCISTR & "_" & Region & ".csv")
            write(FileOUT_csv, "Percentile,Value", newline)
            for i = 1 to m do
                append(FileOUT_csv, string(i) & "," & string(Thr[i]), newline)
            end for
            
        else
        
            print("No forecasts found.")
            
        end if
    
    end for
        
end for

###############################################################################################
# EXTERNAL FUNCTIONS

function left_pad_number (num: number, num_digits: number)

    num_string = ''  #  initialise the string to empty

    for pow = num_digits to 1 by -1 do
        digit = int(num / (10^(pow-1)))
        num_string = num_string & digit
        num = num - digit *(10^(pow-1))
    end for

    return num_string

end left_pad_number