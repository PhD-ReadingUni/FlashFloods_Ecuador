# Metview Macro

# ExtractCSV_ENS.mv extracts the values of raw ECMWF ENS for the 
# grid-boxes belonging to Ecuador's domain

# INPUT PARAMETERS
BaseDateS = 2020-01-01
BaseDateF = 2020-12-31
BaseTimeS = 0
BaseTimeF = 12
DiscTime = 12
StepF_S = 6
StepF_F = 246
DiscStep = 6
Acc = 12
Git_repo = "/vol/ecpoint/mofp/PhD/Papers2Write/FlashFloods_Ecuador"
FileIN_Emask = "Data/Processed/EcuadorMasks_ENS/Ecuador_3Regions.grib"
DirIN_ENS = "Data/Raw/ENS"
DirOUT_ENS = "Data/Processed/ENS"
#########################################################################


# Set general parameters
if Acc<10 then
    AccSTR = "00" & Acc
else 
    AccSTR = "0" & Acc
end if 


# Read Ecuador's mask
Emask = read(Git_repo & "/" & FileIN_Emask)
Emask_vals = values(Emask)
Emask_lats = latitudes(Emask)
Emask_lons = longitudes(Emask)
Emask_nonzeros = find(Emask_vals,1,"all") & find(Emask_vals,2,"all") & find(Emask_vals,3,"all")
m = count(Emask_nonzeros)
Regs_mask = nil
Lats_mask = nil
Lons_mask = nil
for i = 1 to m do
    ind = Emask_nonzeros[i]
    Regs_mask = Regs_mask & |round(Emask_vals[ind],2)|
    Lats_mask = Lats_mask & |round(Emask_lats[ind],2)|
    Lons_mask = Lons_mask & |round(Emask_lons[ind],2)|
end for
Lons_mask = Lons_mask - 360


# Post-process ENS forecasts
for TheDate = BaseDateS to BaseDateF do    
    
    TheDateSTR = string(TheDate, "yyyymmdd")
    
    for TheTime = BaseTimeS to BaseTimeF by DiscTime do
    
        if TheTime<10 then
            TheTimeSTR = "0" & TheTime
        else
            TheTimeSTR = TheTime
        end if
        
        DirOUT = Git_repo & "/" & DirOUT_ENS & "/" & TheDateSTR & TheTimeSTR 
        shell("mkdir -p " & DirOUT)
        
        for StepF = StepF_S to StepF_F by DiscStep do
        
            StepS = StepF - Acc
            
            if StepS<10 then
                StepSSTR = "00" & StepS
            else if (StepS>=10 and StepS<100) then
                StepSSTR = "0" & StepS
            else    
                StepSSTR = StepS
            end if
            
            if StepF<10 then
                StepFSTR = "00" & StepF
            else if (StepF>=10 and StepF<100) then
                StepFSTR = "0" & StepF
            else    
                StepFSTR = StepF
            end if
            
            print("Post-processing " & Acc & "-h ENS forecasts computed on " & TheDateSTR & " at " & TheTimeSTR & " UTC (t+" & StepS & ",t+" & StepF & ")")
            DirIN = Git_repo & "/" & DirIN_ENS & "/" & TheDateSTR & TheTimeSTR 
            FileIN_S = "tp_" & TheDateSTR & "_" & TheTimeSTR & "_" & StepSSTR & ".grib"
            FileIN_F = "tp_" & TheDateSTR & "_" & TheTimeSTR & "_" & StepFSTR & ".grib"
            tpS = read(DirIN & "/" & FileIN_S)
            tpF = read(DirIN & "/" & FileIN_F)
            if count(tpS) <> count(tpF) then
                if count(tpS) = 50 then
                    tpF = tpF[2,51]
                else if count(tpF) = 50 then
                    tpS = tpS[2,51]
                end if
                
                tp = (tpF - tpS) * 1000
                ENS_Emask = nearest_gridpoint(tp,Lats_mask,Lons_mask)
                
                # Saving the ENS forecast as .csv files
                FileOUT = DirOUT & "/tp_" & AccSTR & "_" & TheDateSTR & "_" & TheTimeSTR & "_" & StepFSTR & ".csv"
                File_csv = file(FileOUT)
                write(File_csv, "lat,lon,ENS01,ENS02,ENS03,ENS04,ENS05,ENS06,ENS07,ENS08,ENS09,ENS10,ENS11,ENS12,ENS13,ENS14,ENS15,ENS16,ENS17,ENS18,ENS19,ENS20,ENS21,ENS22,ENS23,ENS24,ENS25,ENS26,ENS27,ENS28,ENS29,ENS30,ENS31,ENS32,ENS33,ENS34,ENS35,ENS36,ENS37,ENS38,ENS39,ENS40,ENS41,ENS42,ENS43,ENS44,ENS45,ENS46,ENS47,ENS48,ENS49,ENS50,ENS51",newline)
                for i = 1 to count(ENS_Emask[1]) do
                    append(File_csv, Lats_mask[i], ",", Lons_mask[i], ",", 
                    ENS_Emask[01][i], ",", ENS_Emask[02][i], ",", ENS_Emask[03][i], ",", ENS_Emask[04][i], ",", ENS_Emask[05][i], ",", ENS_Emask[06][i], ",", ENS_Emask[07][i], ",", ENS_Emask[08][i], ",", ENS_Emask[09][i], ",", ENS_Emask[10][i], ",",
                    ENS_Emask[11][i], ",", ENS_Emask[12][i], ",", ENS_Emask[13][i], ",", ENS_Emask[14][i], ",", ENS_Emask[15][i], ",", ENS_Emask[16][i], ",", ENS_Emask[17][i], ",", ENS_Emask[18][i], ",", ENS_Emask[19][i], ",", ENS_Emask[20][i], ",",
                    ENS_Emask[21][i], ",", ENS_Emask[22][i], ",", ENS_Emask[23][i], ",", ENS_Emask[24][i], ",", ENS_Emask[25][i], ",", ENS_Emask[26][i], ",", ENS_Emask[27][i], ",", ENS_Emask[28][i], ",", ENS_Emask[29][i], ",", ENS_Emask[30][i], ",",
                    ENS_Emask[31][i], ",", ENS_Emask[32][i], ",", ENS_Emask[33][i], ",", ENS_Emask[34][i], ",", ENS_Emask[35][i], ",", ENS_Emask[36][i], ",", ENS_Emask[37][i], ",", ENS_Emask[38][i], ",", ENS_Emask[39][i], ",", ENS_Emask[40][i], ",",
                    ENS_Emask[41][i], ",", ENS_Emask[42][i], ",", ENS_Emask[43][i], ",", ENS_Emask[44][i], ",", ENS_Emask[45][i], ",", ENS_Emask[46][i], ",", ENS_Emask[47][i], ",", ENS_Emask[48][i], ",", ENS_Emask[49][i], ",", ENS_Emask[50][i], newline)
                end for
                
            else if ( count(tpS)=50 and count(tpF)=50 ) then
                
                tp = (tpF - tpS) * 1000
                ENS_Emask = nearest_gridpoint(tp,Lats_mask,Lons_mask)
                
                # Saving the ENS forecast as .csv files
                FileOUT = DirOUT & "/tp_" & AccSTR & "_" & TheDateSTR & "_" & TheTimeSTR & "_" & StepFSTR & ".csv"
                File_csv = file(FileOUT)
                write(File_csv, "lat,lon,ENS01,ENS02,ENS03,ENS04,ENS05,ENS06,ENS07,ENS08,ENS09,ENS10,ENS11,ENS12,ENS13,ENS14,ENS15,ENS16,ENS17,ENS18,ENS19,ENS20,ENS21,ENS22,ENS23,ENS24,ENS25,ENS26,ENS27,ENS28,ENS29,ENS30,ENS31,ENS32,ENS33,ENS34,ENS35,ENS36,ENS37,ENS38,ENS39,ENS40,ENS41,ENS42,ENS43,ENS44,ENS45,ENS46,ENS47,ENS48,ENS49,ENS50,ENS51",newline)
                for i = 1 to count(ENS_Emask[1]) do
                    append(File_csv, Lats_mask[i], ",", Lons_mask[i], ",", 
                    ENS_Emask[01][i], ",", ENS_Emask[02][i], ",", ENS_Emask[03][i], ",", ENS_Emask[04][i], ",", ENS_Emask[05][i], ",", ENS_Emask[06][i], ",", ENS_Emask[07][i], ",", ENS_Emask[08][i], ",", ENS_Emask[09][i], ",", ENS_Emask[10][i], ",",
                    ENS_Emask[11][i], ",", ENS_Emask[12][i], ",", ENS_Emask[13][i], ",", ENS_Emask[14][i], ",", ENS_Emask[15][i], ",", ENS_Emask[16][i], ",", ENS_Emask[17][i], ",", ENS_Emask[18][i], ",", ENS_Emask[19][i], ",", ENS_Emask[20][i], ",",
                    ENS_Emask[21][i], ",", ENS_Emask[22][i], ",", ENS_Emask[23][i], ",", ENS_Emask[24][i], ",", ENS_Emask[25][i], ",", ENS_Emask[26][i], ",", ENS_Emask[27][i], ",", ENS_Emask[28][i], ",", ENS_Emask[29][i], ",", ENS_Emask[30][i], ",",
                    ENS_Emask[31][i], ",", ENS_Emask[32][i], ",", ENS_Emask[33][i], ",", ENS_Emask[34][i], ",", ENS_Emask[35][i], ",", ENS_Emask[36][i], ",", ENS_Emask[37][i], ",", ENS_Emask[38][i], ",", ENS_Emask[39][i], ",", ENS_Emask[40][i], ",",
                    ENS_Emask[41][i], ",", ENS_Emask[42][i], ",", ENS_Emask[43][i], ",", ENS_Emask[44][i], ",", ENS_Emask[45][i], ",", ENS_Emask[46][i], ",", ENS_Emask[47][i], ",", ENS_Emask[48][i], ",", ENS_Emask[49][i], ",", ENS_Emask[50][i], newline)
                end for
            
            else
                
                tp = (tpF - tpS) * 1000
                ENS_Emask = nearest_gridpoint(tp,Lats_mask,Lons_mask)
                
                # Saving the ENS forecast as .csv files
                FileOUT = DirOUT & "/tp_" & AccSTR & "_" & TheDateSTR & "_" & TheTimeSTR & "_" & StepFSTR & ".csv"
                File_csv = file(FileOUT)
                write(File_csv, "lat,lon,ENS01,ENS02,ENS03,ENS04,ENS05,ENS06,ENS07,ENS08,ENS09,ENS10,ENS11,ENS12,ENS13,ENS14,ENS15,ENS16,ENS17,ENS18,ENS19,ENS20,ENS21,ENS22,ENS23,ENS24,ENS25,ENS26,ENS27,ENS28,ENS29,ENS30,ENS31,ENS32,ENS33,ENS34,ENS35,ENS36,ENS37,ENS38,ENS39,ENS40,ENS41,ENS42,ENS43,ENS44,ENS45,ENS46,ENS47,ENS48,ENS49,ENS50,ENS51",newline)
                for i = 1 to count(ENS_Emask[1]) do
                    append(File_csv, Lats_mask[i], ",", Lons_mask[i], ",", 
                    ENS_Emask[01][i], ",", ENS_Emask[02][i], ",", ENS_Emask[03][i], ",", ENS_Emask[04][i], ",", ENS_Emask[05][i], ",", ENS_Emask[06][i], ",", ENS_Emask[07][i], ",", ENS_Emask[08][i], ",", ENS_Emask[09][i], ",", ENS_Emask[10][i], ",",
                    ENS_Emask[11][i], ",", ENS_Emask[12][i], ",", ENS_Emask[13][i], ",", ENS_Emask[14][i], ",", ENS_Emask[15][i], ",", ENS_Emask[16][i], ",", ENS_Emask[17][i], ",", ENS_Emask[18][i], ",", ENS_Emask[19][i], ",", ENS_Emask[20][i], ",",
                    ENS_Emask[21][i], ",", ENS_Emask[22][i], ",", ENS_Emask[23][i], ",", ENS_Emask[24][i], ",", ENS_Emask[25][i], ",", ENS_Emask[26][i], ",", ENS_Emask[27][i], ",", ENS_Emask[28][i], ",", ENS_Emask[29][i], ",", ENS_Emask[30][i], ",",
                    ENS_Emask[31][i], ",", ENS_Emask[32][i], ",", ENS_Emask[33][i], ",", ENS_Emask[34][i], ",", ENS_Emask[35][i], ",", ENS_Emask[36][i], ",", ENS_Emask[37][i], ",", ENS_Emask[38][i], ",", ENS_Emask[39][i], ",", ENS_Emask[40][i], ",",
                    ENS_Emask[41][i], ",", ENS_Emask[42][i], ",", ENS_Emask[43][i], ",", ENS_Emask[44][i], ",", ENS_Emask[45][i], ",", ENS_Emask[46][i], ",", ENS_Emask[47][i], ",", ENS_Emask[48][i], ",", ENS_Emask[49][i], ",", ENS_Emask[50][i], ",", ENS_Emask[51][i], newline)
                end for
            
            end if
                            
        end for
    
    end for            

end for